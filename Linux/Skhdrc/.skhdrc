# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       # <mode> '<' <action> | <action>
#
#   mode         # 'name of mode' | <mode> ',' <mode>
#
#   action       # <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       # <mod> '-' <key> | <key>
#
#   mod          # 'modifier keyword' | <mod> '+' <mod>
#
#   key          # <literal> | <keycode>
#
#   literal      # 'single letter or built-in keyword'
#
#   keycode      # 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst # * <proc_map>
#
#   proc_map     # <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       # '"' 'sequence of characters' '"'
#
#   command      # command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           # keypress is not consumed by skhd
#
#   *            # matches every application not specified in <proc_map_lst>
#
#   ~            # application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl # '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      # desired name for this mode,
#
#   @         # capture keypresses regardless of being bound to an action
#
#   command   # command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #
# ======================================== 焦点控制 ========================================
# 移动当前焦点到相邻的上下左右四个位置的窗口上
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - k : yabai -m window --focus north
alt - j : yabai -m window --focus south

# 将焦点移动到其他显示器上：1号显示器（主显示器），2号显示器（外接显示器）
ctrl + alt - h : yabai -m display --focus 2
ctrl + alt - l : yabai -m display --focus 1

# ======================================== 平铺窗口控制 ========================================
# 当前窗口和上下左右四个位置的窗口交换位置
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east
shift + alt - k : yabai -m window --swap north
shift + alt - j : yabai -m window --swap south

# 增加和其他窗口相邻边的上下左右边界<x:y>
shift + alt - a : yabai -m window --resize left:-20:0
shift + alt - s : yabai -m window --resize bottom:0:20
shift + alt - w : yabai -m window --resize top:0:-20
shift + alt - d : yabai -m window --resize right:20:0

# 减少和其他窗口相邻边的上下左右边界<x:y>
shift + cmd - a : yabai -m window --resize left:20:0
shift + cmd - s : yabai -m window --resize bottom:0:-20
shift + cmd - w : yabai -m window --resize top:0:20
shift + cmd - d : yabai -m window --resize right:-20:0

# 窗口显示为全屏
alt + cmd - return : yabai -m window --toggle zoom-fullscreen

# move managed window
# shift + cmd - h : yabai -m window --warp east
# ======================================== 浮动窗口控制 ========================================
# 使当前窗口移动到屏幕中央并成为浮动窗口/复原
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# 使当前窗口移动到屏幕右上角并成为浮动窗口/复原（画中画）
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle pip

# 使浮动窗口移动到左半屏(rows:cols:x:y:width:height)
shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1
# 使浮动窗口移动到右半屏(rows:cols:x:y:width:height)
shift + alt - right  : yabai -m window --grid 1:2:1:0:1:1
# 使浮动窗口成为全屏(rows:cols:x:y:width:height)
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# 恢复原始窗口大小
shift + alt - 0 : yabai -m space --balance

# 移动浮动窗口<x:y>
shift + ctrl - a : yabai -m window --move rel:-20:0
shift + ctrl - s : yabai -m window --move rel:0:20
shift + ctrl - w : yabai -m window --move rel:0:-20
shift + ctrl - d : yabai -m window --move rel:20:0


# ======================================== 桌面控制 ========================================
# 创建一个桌面
shift + cmd - n : yabai -m space --create && index="$(yabai -m query --spaces --display | jq '.| length')" && yabai -m window --space "${index}" && yabai -m space --focus "${index}"
# 销毁一个桌面
shift + cmd - m : yabai -m space --destroy
# 把窗口发送到指定桌面，并移动焦点到相对应的桌面
shift + cmd - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + cmd - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + cmd - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + cmd - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + cmd - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + cmd - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + cmd - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + cmd - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + cmd - 9 : yabai -m window --space 9; yabai -m space --focus 9

# 移动焦点到指定的桌面
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent

# toggle window split type
# alt - e : yabai -m window --toggle split

